/*
 * Archivo: absModels.cpp
 * Fecha: 23/03/2013
 * Autores: David Pérez Castilla
 *          Alejandro Vázquez
 *          Fernando Perera
 *          Darío Orgaz Manjón
 *          Gabriel Diaz Arias
 *  Clase: AbsObject3D
 * Descripcion: Clase Abstracta que define las operaciones basicas para cualquier objeto que contenga modelos
 */

#include "absModel.h"
#include "Utils/util.h"
#include <QDir>
#include <QStringList>


AbsModels::AbsModels()
{
}

/*-------------------------------------------------------------------
 |  Function AbsModels
 |
 |  Purpose: Gets the visibility of the complete model
 |  Returns: bool : The visibility of the object
 *-------------------------------------------------------------------*/
bool AbsModels::isVisible(){
    return _isVisible;
}

/*-------------------------------------------------------------------
 |  Function getPosition
 |
 |  Purpose: Gets the model position
 |  Returns: Point3D * : The position of the object
 *-------------------------------------------------------------------*/
Point3D *AbsModels::getPosition(){
    return new Point3D(_worldTrans.getOrigin().getX(), _worldTrans.getOrigin().getY(), _worldTrans.getOrigin().getZ());
}

/*-------------------------------------------------------------------
 |  Function getWorldTransform
 |
 |  Purpose: Gets the model transformation that must be applied to the object
 |  Parameters: btTransform &worldTrans: Transformation of the model generated by the motion state
 *-------------------------------------------------------------------*/
void AbsModels::getWorldTransform(btTransform &worldTrans) const{
    worldTrans = _worldTrans;
}

/*-------------------------------------------------------------------
 |  Function setWorldTransform
 |
 |  Purpose: Sets the model transformation that must be applied to the object. This function is AUTOMATICALLY called
 |           when a movement of the object is done
 |  Parameters: btTransform &worldTrans: Transformation of the model generated by the motion state
 *-------------------------------------------------------------------*/
void AbsModels::setWorldTransform(const btTransform &worldTrans){
    _worldTrans = worldTrans;
}

/*-------------------------------------------------------------------
|  Function checkIsVisible
|  Purpose: Checks de visibility of the entire object, updates and returns it
|  Returns: The visibility of the entire object
*-------------------------------------------------------------------*/
bool AbsModels::checkIsVisible(Point3D *pointCamera, int distance, btTransform transform){
    bool visible = false;
    int d = sqrt(pow(pointCamera->getX() - transform.getOrigin().getX(),2) + pow(pointCamera->getY() - transform.getOrigin().getY(),2) + pow(pointCamera->getZ() - transform.getOrigin().getZ(),2));
    if(d < distance){
        _isVisible = true;
        visible = true;
    }else{
        _isVisible = false;
    }
    return visible;
}
